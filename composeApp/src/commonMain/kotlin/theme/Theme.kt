package theme

import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme


// https://m3.material.io/styles/color/roles
// https://m3.material.io/styles/color/dynamic/user-generated-source#602fc8d8-6bb7-4b0c-a652-2aa8e7b6a5bb

val lightScheme = lightColorScheme(
    primary = Normal.primaryLight,
    onPrimary = Normal.onPrimaryLight,
    primaryContainer = Normal.primaryContainerLight,
    onPrimaryContainer = Normal.onPrimaryContainerLight,
    secondary = Normal.secondaryLight,
    onSecondary = Normal.onSecondaryLight,
    secondaryContainer = Normal.secondaryContainerLight,
    onSecondaryContainer = Normal.onSecondaryContainerLight,
    tertiary = Normal.tertiaryLight,
    onTertiary = Normal.onTertiaryLight,
    tertiaryContainer = Normal.tertiaryContainerLight,
    onTertiaryContainer = Normal.onTertiaryContainerLight,
    error = Normal.errorLight,
    onError = Normal.onErrorLight,
    errorContainer = Normal.errorContainerLight,
    onErrorContainer = Normal.onErrorContainerLight,
    background = Normal.backgroundLight,
    onBackground = Normal.onBackgroundLight,
    surface = Normal.surfaceLight,
    onSurface = Normal.onSurfaceLight,
    surfaceVariant = Normal.surfaceVariantLight,
    onSurfaceVariant = Normal.onSurfaceVariantLight,
    outline = Normal.outlineLight,
    outlineVariant = Normal.outlineVariantLight,
    scrim = Normal.scrimLight,
    inverseSurface = Normal.inverseSurfaceLight,
    inverseOnSurface = Normal.inverseOnSurfaceLight,
    inversePrimary = Normal.inversePrimaryLight,
    surfaceDim = Normal.surfaceDimLight,
    surfaceBright = Normal.surfaceBrightLight,
    surfaceContainerLowest = Normal.surfaceContainerLowestLight,
    surfaceContainerLow = Normal.surfaceContainerLowLight,
    surfaceContainer = Normal.surfaceContainerLight,
    surfaceContainerHigh = Normal.surfaceContainerHighLight,
    surfaceContainerHighest = Normal.surfaceContainerHighestLight,
)

val darkScheme = darkColorScheme(
    primary = Normal.primaryDark,
    onPrimary = Normal.onPrimaryDark,
    primaryContainer = Normal.primaryContainerDark,
    onPrimaryContainer = Normal.onPrimaryContainerDark,
    secondary = Normal.secondaryDark,
    onSecondary = Normal.onSecondaryDark,
    secondaryContainer = Normal.secondaryContainerDark,
    onSecondaryContainer = Normal.onSecondaryContainerDark,
    tertiary = Normal.tertiaryDark,
    onTertiary = Normal.onTertiaryDark,
    tertiaryContainer = Normal.tertiaryContainerDark,
    onTertiaryContainer = Normal.onTertiaryContainerDark,
    error = Normal.errorDark,
    onError = Normal.onErrorDark,
    errorContainer = Normal.errorContainerDark,
    onErrorContainer = Normal.onErrorContainerDark,
    background = Normal.backgroundDark,
    onBackground = Normal.onBackgroundDark,
    surface = Normal.surfaceDark,
    onSurface = Normal.onSurfaceDark,
    surfaceVariant = Normal.surfaceVariantDark,
    onSurfaceVariant = Normal.onSurfaceVariantDark,
    outline = Normal.outlineDark,
    outlineVariant = Normal.outlineVariantDark,
    scrim = Normal.scrimDark,
    inverseSurface = Normal.inverseSurfaceDark,
    inverseOnSurface = Normal.inverseOnSurfaceDark,
    inversePrimary = Normal.inversePrimaryDark,
    surfaceDim = Normal.surfaceDimDark,
    surfaceBright = Normal.surfaceBrightDark,
    surfaceContainerLowest = Normal.surfaceContainerLowestDark,
    surfaceContainerLow = Normal.surfaceContainerLowDark,
    surfaceContainer = Normal.surfaceContainerDark,
    surfaceContainerHigh = Normal.surfaceContainerHighDark,
    surfaceContainerHighest = Normal.surfaceContainerHighestDark,
)

val lightSchemeCoffee = lightColorScheme(
    primary = Coffee.primaryLight,
    onPrimary = Coffee.onPrimaryLight,
    primaryContainer = Coffee.primaryContainerLight,
    onPrimaryContainer = Coffee.onPrimaryContainerLight,
    secondary = Coffee.secondaryLight,
    onSecondary = Coffee.onSecondaryLight,
    secondaryContainer = Coffee.secondaryContainerLight,
    onSecondaryContainer = Coffee.onSecondaryContainerLight,
    tertiary = Coffee.tertiaryLight,
    onTertiary = Coffee.onTertiaryLight,
    tertiaryContainer = Coffee.tertiaryContainerLight,
    onTertiaryContainer = Coffee.onTertiaryContainerLight,
    error = Coffee.errorLight,
    onError = Coffee.onErrorLight,
    errorContainer = Coffee.errorContainerLight,
    onErrorContainer = Coffee.onErrorContainerLight,
    background = Coffee.backgroundLight,
    onBackground = Coffee.onBackgroundLight,
    surface = Coffee.surfaceLight,
    onSurface = Coffee.onSurfaceLight,
    surfaceVariant = Coffee.surfaceVariantLight,
    onSurfaceVariant = Coffee.onSurfaceVariantLight,
    outline = Coffee.outlineLight,
    outlineVariant = Coffee.outlineVariantLight,
    scrim = Coffee.scrimLight,
    inverseSurface = Coffee.inverseSurfaceLight,
    inverseOnSurface = Coffee.inverseOnSurfaceLight,
    inversePrimary = Coffee.inversePrimaryLight,
    surfaceDim = Coffee.surfaceDimLight,
    surfaceBright = Coffee.surfaceBrightLight,
    surfaceContainerLowest = Coffee.surfaceContainerLowestLight,
    surfaceContainerLow = Coffee.surfaceContainerLowLight,
    surfaceContainer = Coffee.surfaceContainerLight,
    surfaceContainerHigh = Coffee.surfaceContainerHighLight,
    surfaceContainerHighest = Coffee.surfaceContainerHighestLight,
)

val darkSchemeCoffee = darkColorScheme(
    primary = Coffee.primaryDark,
    onPrimary = Coffee.onPrimaryDark,
    primaryContainer = Coffee.primaryContainerDark,
    onPrimaryContainer = Coffee.onPrimaryContainerDark,
    secondary = Coffee.secondaryDark,
    onSecondary = Coffee.onSecondaryDark,
    secondaryContainer = Coffee.secondaryContainerDark,
    onSecondaryContainer = Coffee.onSecondaryContainerDark,
    tertiary = Coffee.tertiaryDark,
    onTertiary = Coffee.onTertiaryDark,
    tertiaryContainer = Coffee.tertiaryContainerDark,
    onTertiaryContainer = Coffee.onTertiaryContainerDark,
    error = Coffee.errorDark,
    onError = Coffee.onErrorDark,
    errorContainer = Coffee.errorContainerDark,
    onErrorContainer = Coffee.onErrorContainerDark,
    background = Coffee.backgroundDark,
    onBackground = Coffee.onBackgroundDark,
    surface = Coffee.surfaceDark,
    onSurface = Coffee.onSurfaceDark,
    surfaceVariant = Coffee.surfaceVariantDark,
    onSurfaceVariant = Coffee.onSurfaceVariantDark,
    outline = Coffee.outlineDark,
    outlineVariant = Coffee.outlineVariantDark,
    scrim = Coffee.scrimDark,
    inverseSurface = Coffee.inverseSurfaceDark,
    inverseOnSurface = Coffee.inverseOnSurfaceDark,
    inversePrimary = Coffee.inversePrimaryDark,
    surfaceDim = Coffee.surfaceDimDark,
    surfaceBright = Coffee.surfaceBrightDark,
    surfaceContainerLowest = Coffee.surfaceContainerLowestDark,
    surfaceContainerLow = Coffee.surfaceContainerLowDark,
    surfaceContainer = Coffee.surfaceContainerDark,
    surfaceContainerHigh = Coffee.surfaceContainerHighDark,
    surfaceContainerHighest = Coffee.surfaceContainerHighestDark,
)


val lightSchemeTea = lightColorScheme(
    primary = Tea.primaryLight,
    onPrimary = Tea.onPrimaryLight,
    primaryContainer = Tea.primaryContainerLight,
    onPrimaryContainer = Tea.onPrimaryContainerLight,
    secondary = Tea.secondaryLight,
    onSecondary = Tea.onSecondaryLight,
    secondaryContainer = Tea.secondaryContainerLight,
    onSecondaryContainer = Tea.onSecondaryContainerLight,
    tertiary = Tea.tertiaryLight,
    onTertiary = Tea.onTertiaryLight,
    tertiaryContainer = Tea.tertiaryContainerLight,
    onTertiaryContainer = Tea.onTertiaryContainerLight,
    error = Tea.errorLight,
    onError = Tea.onErrorLight,
    errorContainer = Tea.errorContainerLight,
    onErrorContainer = Tea.onErrorContainerLight,
    background = Tea.backgroundLight,
    onBackground = Tea.onBackgroundLight,
    surface = Tea.surfaceLight,
    onSurface = Tea.onSurfaceLight,
    surfaceVariant = Tea.surfaceVariantLight,
    onSurfaceVariant = Tea.onSurfaceVariantLight,
    outline = Tea.outlineLight,
    outlineVariant = Tea.outlineVariantLight,
    scrim = Tea.scrimLight,
    inverseSurface = Tea.inverseSurfaceLight,
    inverseOnSurface = Tea.inverseOnSurfaceLight,
    inversePrimary = Tea.inversePrimaryLight,
    surfaceDim = Tea.surfaceDimLight,
    surfaceBright = Tea.surfaceBrightLight,
    surfaceContainerLowest = Tea.surfaceContainerLowestLight,
    surfaceContainerLow = Tea.surfaceContainerLowLight,
    surfaceContainer = Tea.surfaceContainerLight,
    surfaceContainerHigh = Tea.surfaceContainerHighLight,
    surfaceContainerHighest = Tea.surfaceContainerHighestLight,
)

val darkSchemeTea = darkColorScheme(
    primary = Tea.primaryDark,
    onPrimary = Tea.onPrimaryDark,
    primaryContainer = Tea.primaryContainerDark,
    onPrimaryContainer = Tea.onPrimaryContainerDark,
    secondary = Tea.secondaryDark,
    onSecondary = Tea.onSecondaryDark,
    secondaryContainer = Tea.secondaryContainerDark,
    onSecondaryContainer = Tea.onSecondaryContainerDark,
    tertiary = Tea.tertiaryDark,
    onTertiary = Tea.onTertiaryDark,
    tertiaryContainer = Tea.tertiaryContainerDark,
    onTertiaryContainer = Tea.onTertiaryContainerDark,
    error = Tea.errorDark,
    onError = Tea.onErrorDark,
    errorContainer = Tea.errorContainerDark,
    onErrorContainer = Tea.onErrorContainerDark,
    background = Tea.backgroundDark,
    onBackground = Tea.onBackgroundDark,
    surface = Tea.surfaceDark,
    onSurface = Tea.onSurfaceDark,
    surfaceVariant = Tea.surfaceVariantDark,
    onSurfaceVariant = Tea.onSurfaceVariantDark,
    outline = Tea.outlineDark,
    outlineVariant = Tea.outlineVariantDark,
    scrim = Tea.scrimDark,
    inverseSurface = Tea.inverseSurfaceDark,
    inverseOnSurface = Tea.inverseOnSurfaceDark,
    inversePrimary = Tea.inversePrimaryDark,
    surfaceDim = Tea.surfaceDimDark,
    surfaceBright = Tea.surfaceBrightDark,
    surfaceContainerLowest = Tea.surfaceContainerLowestDark,
    surfaceContainerLow = Tea.surfaceContainerLowDark,
    surfaceContainer = Tea.surfaceContainerDark,
    surfaceContainerHigh = Tea.surfaceContainerHighDark,
    surfaceContainerHighest = Tea.surfaceContainerHighestDark,
)



